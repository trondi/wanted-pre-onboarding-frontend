{"version":3,"sources":["components/Auth/AuthForm.module.css","components/Layout/MainNavigation.module.css","store/auth-context.js","components/Layout/MainNavigation.js","components/Layout/Layout.js","components/Auth/AuthForm.js","pages/AuthPage.js","components/Todos/InputBox.jsx","components/Todos/ToDoItem.jsx","components/Todos/ToDoItemList.jsx","pages/Todos.js","App.js","index.js"],"names":["module","exports","AuthContext","React","createContext","token","isLoggedIn","login","logout","AuthContextProvider","props","initialToken","localStorage","getItem","useState","setToken","contextValue","setItem","removeItem","Provider","value","children","MainNavigation","authCtx","useContext","className","classes","header","to","logo","onClick","Layout","AuthForm","history","useHistory","emailInputRef","useRef","passwordInputRef","useEffect","isLogin","setIsLogin","isLoading","setIsLoading","auth","onSubmit","event","preventDefault","enteredEmail","current","enteredPassword","url","axios","method","data","email","password","then","res","access_token","console","log","errorMessage","error","message","Error","replace","catch","alert","control","htmlFor","type","id","required","ref","onChange","refInput","includes","length","actions","toggle","prevState","AuthPage","InputBox","todoList","setTodoList","todo","setTodo","inputRef","onClickAddButton","nextTodoList","concat","isCompleted","deleted","focus","name","placeholder","e","target","onKeyDown","key","ToDoItem","todoItem","edited","setEdited","newTodo","setNewTodo","editInputRef","checked","map","item","window","confirm","ToDoItemList","title","checkedList","Todos","App","path","exact","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.3301cae9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"AuthForm_auth__MPw6W\",\"control\":\"AuthForm_control__2fVSU\",\"actions\":\"AuthForm_actions__1VNhY\",\"toggle\":\"AuthForm_toggle__21tnB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MainNavigation_header__2lqQ1\",\"logo\":\"MainNavigation_logo__1TgMx\"};","import React, { useState } from \"react\";\n\nconst AuthContext = React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: (token) => {},\n  logout: () => {},\n});\n\nexport const AuthContextProvider = (props) => {\n  const initialToken = localStorage.getItem(\"token\");\n  const [token, setToken] = useState(initialToken);\n\n  const userIsLoggedIn = !!token;\n\n  const loginHandler = (token) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n  };\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n","import { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport AuthContext from \"../../store/auth-context\";\n\nimport classes from \"./MainNavigation.module.css\";\n\nconst MainNavigation = () => {\n  const authCtx = useContext(AuthContext);\n\n  const isLoggedIn = authCtx.isLoggedIn;\n\n  const logoutHandler = () => {\n    authCtx.logout();\n    //optional : redirect the user\n  };\n\n  return (\n    <header className={classes.header}>\n      <Link to=\"/\">\n        <div className={classes.logo}>React Assignment</div>\n      </Link>\n      <nav>\n        <ul>\n          {!isLoggedIn && (\n            <li>\n              <Link to=\"/auth\">Login</Link>\n            </li>\n          )}\n          {isLoggedIn && (\n            <li>\n              <Link to=\"/todos\">Todos</Link>\n            </li>\n          )}\n          {isLoggedIn && (\n            <li>\n              <button onClick={logoutHandler}>Logout</button>\n            </li>\n          )}\n        </ul>\n      </nav>\n    </header>\n  );\n};\n\nexport default MainNavigation;\n","import { Fragment } from 'react';\n\nimport MainNavigation from './MainNavigation';\n\nconst Layout = (props) => {\n  return (\n    <Fragment>\n      <MainNavigation />\n      <main>{props.children}</main>\n    </Fragment>\n  );\n};\n\nexport default Layout;\n","import { useEffect, useState, useRef, useContext } from \"react\";\nimport AuthContext from \"../../store/auth-context\";\nimport { useHistory } from \"react-router-dom\";\n\nimport classes from \"./AuthForm.module.css\";\nimport axios from \"axios\";\n\nconst AuthForm = () => {\n  const history = useHistory();\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  // const [email, setEmail] = useState(emailInputRef);\n  // const [password, setPassword] = useState(passwordInputRef);\n\n  // const [emailError, setEmailError] = useState(false);\n  // const [passwordError, setPassWordError] = useState(false);\n\n  useEffect(() => {}, [emailInputRef, passwordInputRef]);\n\n  const authCtx = useContext(AuthContext);\n\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n\n    setIsLoading(true);\n\n    //optional : add validation\n    let url = \"https://pre-onboarding-selection-task.shop\";\n    if (isLogin) {\n      url = `${url}/auth/signin`;\n    } else {\n      url = `${url}/auth/signup`;\n    }\n\n    axios({\n      method: \"POST\",\n      url: url,\n      data: {\n        email: enteredEmail,\n        password: enteredPassword,\n      },\n    })\n      .then((res) => {\n        setIsLoading(false);\n\n        if (res.data.access_token) {\n          // success\n          console.log(\"data\", res.data);\n          return res;\n        } else {\n          // return;\n          return (data) => {\n            //show an error modal\n            let errorMessage = \"Authrntication failed!\";\n            if (data && data.error && data.error.message) {\n              errorMessage = data.error.message;\n            }\n\n            throw new Error(errorMessage);\n          };\n        }\n      })\n      .then((res) => {\n        authCtx.login(res.data.access_token);\n\n        console.log(\"res\", res);\n        console.log(\"res.data\", res.data);\n        console.log(\"acc_t\", res.data.access_token);\n\n        history.replace(\"/todos\");\n        //뒤로가기 버튼으로 뒤로 갈 수 없도록 -> replace\n      })\n      .catch((error) => {\n        console.log(error);\n        alert(error.message);\n        setIsLoading(false);\n        throw new Error(error);\n      });\n  };\n\n  const onBlurEmailHandler = (refInput) => {\n    if (!refInput.current?.value.includes(\"@\")) {\n      console.log(`이메일은 @가 포함되어야 합니다.`);\n    }\n  };\n\n  const onBlurPwHandler = (refInput) => {\n    if (refInput.current?.value.length < 8) {\n      console.log(`비밀번호는 8자리 이상이여야 합니다.`);\n    }\n  };\n\n  return (\n    <section className={classes.auth}>\n      <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1>\n      <form onSubmit={submitHandler}>\n        <div className={classes.control}>\n          <label htmlFor=\"email\">Email</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            required\n            ref={emailInputRef}\n            onChange={onBlurEmailHandler}\n            // onBlur={onBlurEmailHandler.bind(this, emailInputRef)}\n          />\n          {/* {onBlurEmailHandler && (\n            <p style={{ color: \"red\" }}>이메일 형식에 맞지 않습니다.</p>\n          )} */}\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            required\n            ref={passwordInputRef}\n            onChange={onBlurPwHandler}\n            // onBlur={onBlurPwHandler.bind(this, passwordInputRef)}\n          />\n          {/* {onBlurPwHandler && (\n            <p style={{ color: \"red\" }}>8자 이상 입력해주세요.</p>\n          )} */}\n        </div>\n        <div className={classes.actions}>\n          {!isLoading && <button>{isLogin ? \"로그인\" : \"회원가입\"}</button>}\n          {isLoading && <p>Sending Request...</p>}\n          <button\n            type=\"button\"\n            className={classes.toggle}\n            onClick={switchAuthModeHandler}\n          >\n            {isLogin ? \"Create new account\" : \"Login with existing account\"}\n          </button>\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default AuthForm;\n","import AuthForm from '../components/Auth/AuthForm';\n\nconst AuthPage = () => {\n  return <AuthForm />;\n};\n\nexport default AuthPage;\n","import React, { useRef, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst InputBox = ({ todoList, setTodoList }) => {\n  const [todo, setTodo] = useState(\"\");\n  const inputRef = useRef(null);\n\n  //input 값 가져오기\n  const onChangeInput = (e) => {\n    setTodo(e.target.value);\n  };\n\n  const onClickAddButton = () => {\n    //todoItemList 에 값 추가\n    const nextTodoList = todoList.concat({\n      id: todoList.length,\n      todo,\n      isCompleted: false,\n      deleted: false, //삭제 Flag 값\n    });\n    setTodoList(nextTodoList);\n\n    setTodo(\"\"); // input 값을 초기화\n    inputRef.current.focus(); // input으로 포커싱\n  };\n\n  const handleOnKeyPress = (e) => {\n    if (e.key === \"Enter\") {\n      onClickAddButton(); // Enter 입력이 되면 클릭 이벤트 실행\n    }\n  };\n\n  useEffect(() => {\n    //todoList가 변했을 때만 실행\n    console.log(todoList);\n  }, [todoList]);\n\n  return (\n    <div className=\"todoapp__inputbox\">\n      {/* 아이템 내용 입력 input */}\n      <input\n        type=\"text\"\n        name=\"todoItem\"\n        value={todo}\n        ref={inputRef}\n        placeholder=\"할 일을 입력해주세요\"\n        className=\"todoapp__inputbox-inp\"\n        onChange={onChangeInput}\n        onKeyDown={handleOnKeyPress}\n      />\n      {/* 입력 후 아이템 추가 버튼 */}\n      <button\n        type=\"submit\"\n        className=\"todoapp__inputbox-add-btn\"\n        onClick={onClickAddButton}\n      >\n        추가\n      </button>\n    </div>\n  );\n};\n\n//Props 값 검증\nInputBox.propTypes = {\n  todoList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      todo: PropTypes.string.isRequired,\n    }).isRequired\n  ),\n  setTodoList: PropTypes.func.isRequired,\n};\n\nexport default InputBox;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nconst ToDoItem = ({ todoItem, todoList, setTodoList }) => {\n  const [edited, setEdited] = useState(false); //수정모드 플래그 값\n  const [newTodo, setNewTodo] = useState(todoItem.todo); //새로운 아이템 내용\n\n  const editInputRef = useRef(null);\n\n  useEffect(() => {\n    // edit 모드일때 포커싱\n    if (edited) {\n      editInputRef.current.focus();\n    }\n  }, [edited]);\n\n  const onChangeCheckbox = () => {\n    const nextTodoList = todoList.map((item) => ({\n      ...item,\n      // id 값이 같은 항목의 checked 값을 Toggle 함\n      isCompleted:\n        item.id === todoItem.id ? !item.isCompleted : item.isCompleted,\n    }));\n    setTodoList(nextTodoList);\n  };\n\n  const onClickEditButton = () => {\n    //수정모드로 변경\n    // 클릭 시 edited 값을 true 로 바꿈\n    setEdited(true);\n  };\n  const onClickCancelButton = () => {\n    setEdited(false);\n    setNewTodo(todoList.item.todo);\n  };\n\n  const onChangeEditInput = (e) => {\n    //수정 Input 변화 감지\n    setNewTodo(e.target.value);\n  };\n\n  const onClickSubmitButton = () => {\n    const nextTodoList = todoList.map((item) => ({\n      ...item,\n      todo: item.id === todoItem.id ? newTodo : item.todo, //새로운 아이템 내용을 넣어줌\n    }));\n    setTodoList(nextTodoList); //새로운 리스트를 넣어줌\n\n    setEdited(false); //수정모드 > 읽기모드\n  };\n\n  const onClickDeleteButton = () => {\n    //Delete\n    if (window.confirm(\"Delete it?\")) {\n      const nextTodoList = todoList.map((item) => ({\n        ...item,\n        deleted: item.id === todoItem.id ? true : item.deleted,\n      }));\n      setTodoList(nextTodoList);\n    }\n  };\n\n  return (\n    <li className=\"todoapp__item\">\n      {/* 아이템 완료 체크 / 체크 해제를 위한 체크박스 */}\n\n      <input\n        type=\"checkbox\"\n        className=\"todoapp__item-checkbox\"\n        checked={todoItem.isCompleted}\n        onChange={onChangeCheckbox}\n      />\n\n      {\n        // item 내용\n        edited ? ( //수정모드\n          <input\n            type=\"text\"\n            className=\"todoapp__item-edit-input\"\n            value={newTodo}\n            ref={editInputRef}\n            onChange={onChangeEditInput}\n          />\n        ) : (\n          //읽기모드\n          <span\n            className={`todoapp__item-ctx ${\n              todoItem.isCompleted ? \"todoapp__item-ctx-checked\" : \"\"\n            }`}\n          >\n            {todoItem.todo}\n          </span>\n        )\n      }\n\n      {\n        // 수정 버튼\n        //완료된 일인 경우에는 null을 반환하여 보이지 않도록 함\n        !todoItem.isCompleted ? (\n          edited ? (\n            <>\n              <button\n                type=\"button\"\n                className=\"todoapp__item-edit-btn\"\n                onClick={onClickSubmitButton}\n              >\n                Save\n              </button>\n              <button\n                type=\"button\"\n                className=\"todoapp__item-cancel-btn\"\n                onClick={onClickCancelButton}\n              >\n                Cancel\n              </button>\n            </>\n          ) : (\n            <>\n              <button\n                type=\"button\"\n                className=\"todoapp__item-edit-btn\"\n                onClick={onClickEditButton}\n              >\n                Edit\n              </button>\n              {/* 삭제 버튼 */}\n              <button\n                type=\"button\"\n                className=\"todoapp__item-delete-btn\"\n                onClick={onClickDeleteButton}\n              >\n                Del\n              </button>\n            </>\n          )\n        ) : null\n      }\n    </li>\n  );\n};\n\nToDoItem.propTypes = {\n  todoItem: PropTypes.shape({\n    id: PropTypes.number,\n    todo: PropTypes.string.isRequired,\n  }),\n  todoList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      todo: PropTypes.string.isRequired,\n    })\n  ),\n  setTodoList: PropTypes.func.isRequired,\n};\n\nexport default ToDoItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ToDoItem from \"./ToDoItem\";\n\nconst ToDoItemList = ({ title, todoList, setTodoList, checkedList }) => (\n  <div className=\"todoapp__list\">\n    {/*props로 부터 title 값을 전달 받음*/}\n    <p className=\"todoapp__list-tit\">{title}</p>\n\n    <ul className=\"todoapp__list-ul\">\n      {todoList && // todoList가 있을 때만 출력(if)\n        todoList.map((todoItem) => {\n          // 삭제한 항목인 경우, 출력하지 않음(deleted : true)\n          if (todoItem.deleted) return null;\n\n          //checkedList 값에 따라 '할일 목록' 또는 '완료된 목록' 출력\n          if (checkedList !== todoItem.isCompleted) return null;\n\n          return (\n            //map 을 이용하여 ToDoItem을 출력\n            <ToDoItem\n              key={todoItem.id}\n              todoItem={todoItem}\n              todoList={todoList}\n              setTodoList={setTodoList}\n            />\n          );\n        })}\n    </ul>\n  </div>\n);\n\nToDoItemList.propTypes = {\n  title: PropTypes.string.isRequired,\n  todoList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      todo: PropTypes.string.isRequired,\n    })\n  ),\n  setTodoList: PropTypes.func.isRequired,\n  checkedList: PropTypes.bool.isRequired,\n};\n\nexport default ToDoItemList;\n","import React, { useState } from \"react\";\nimport InputBox from \"../components/Todos/InputBox\";\nimport \"../components/css/Todo.css\";\nimport ToDoItemList from \"../components/Todos/ToDoItemList\";\n\nconst Todos = () => {\n  const [todoList, setTodoList] = useState([]); //todoList 배열\n\n  return (\n    <div className=\"homepage__container\">\n      <h1>Todo List</h1>\n      {/* ToDo Item을 추가할 수 있는 input 박스 */}\n      <InputBox todoList={todoList} setTodoList={setTodoList} />\n\n      {/* 할 일 Item 리스트 */}\n      <ToDoItemList\n        title={\"Todo\"}\n        todoList={todoList}\n        setTodoList={setTodoList}\n        checkedList={false}\n      />\n\n      {/* 완료한 Item 리스트 */}\n      <ToDoItemList\n        title={\"Done\"}\n        todoList={todoList}\n        setTodoList={setTodoList}\n        checkedList={true}\n      />\n    </div>\n  );\n};\n\nexport default Todos;\n","import { Switch, Route, Redirect } from \"react-router-dom\";\nimport { useContext } from \"react\";\n\nimport Layout from \"./components/Layout/Layout\";\nimport AuthPage from \"./pages/AuthPage\";\nimport AuthContext from \"./store/auth-context\";\nimport Todos from \"./pages/Todos\";\n\nfunction App() {\n  const authCtx = useContext(AuthContext);\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" exact>\n          <AuthPage />\n        </Route>\n        {!authCtx.isLoggedIn && (\n          <Route path=\"/auth\">\n            <AuthPage />\n          </Route>\n        )}\n        <Route path=\"/todos\">\n          {authCtx.isLoggedIn && <Todos />}\n          {!authCtx.isLoggedIn && <Redirect to=\"auth\" />}\n        </Route>\n        {/*  다른 경로 막음 */}\n        <Route path=\"*\">\n          <Redirect to=\"/\" />\n        </Route>\n      </Switch>\n    </Layout>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom/client\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { AuthContextProvider } from \"./store/auth-context\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <AuthContextProvider>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </AuthContextProvider>\n);\n"],"sourceRoot":""}